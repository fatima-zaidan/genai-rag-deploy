name: CI/CD to EC2 - Genii Assistant

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/genai-assistant:latest
      NAME: genii-assistant
      HOST_PORT: 80      # EC2 host port
      CONTAINER_PORT: 7860 # Gradio container port

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}

      - name: Deploy to EC2 using Docker Compose
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            IMAGE="${{ env.IMAGE }}"
            NAME="${{ env.NAME }}"
            HOST_PORT="${{ env.HOST_PORT }}"
            CONTAINER_PORT="${{ env.CONTAINER_PORT }}"

            echo "Logging in to Docker Hub on EC2..."
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            cd /home/${{ secrets.EC2_USER }}
            if [ ! -d "genii-assistant" ]; then
             git clone https://github.com/fatima-zaidan/genai-rag-deploy.git genii-assistant
            fi
            cd genii-assistant
            git pull origin main

            echo "Pulling latest images..."
            docker compose pull

            echo "Stopping and removing existing containers if any..."
            docker compose down

            echo "Building and starting containers..."
            docker compose up -d --build

            echo "Cleaning up unused images..."
            docker image prune -f

            echo "Deployment completed successfully."
